services:
  mysql:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=user_db
    ports:
      - "3306:3306"
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=root -e 'SHOW DATABASES;'"
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - mysql_data:/var/lib/mysql

  redis:
    image: redis:7
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli","--raw", "incr","ping" ]
      interval: 5s
      timeout: 5s
      retries: 10

  # 1. 从源码通过 spring-boot 运行程序
  monolith-demo-mvn:
    image: maven:3.9.8-eclipse-temurin-21
    working_dir: /usr/src/workdir
    command: "mvn clean -DskipTests spring-boot:run -pl monolith-demo"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - .:/usr/src/workdir
      - ~/.m2:/root/.m2
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD-SHELL','curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1' ]
      interval: 5s
      timeout: 5s
      retries: 10

  # 2. mvn spring-boot:build-image
  # docker run -p 8080:8080 --platform linux/amd64 --network host monolith-demo:0.0.1-SNAPSHOT

  # 3. 使用 docker 构建镜像，需要先执行 maven package -DskipTests
  monolith-demo-docker:
    build: ./monolith-demo
    image: chensoul/monolith-demo
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD-SHELL','curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1' ]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  mysql_data:
  redis_data:
